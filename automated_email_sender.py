# -*- coding: utf-8 -*-
"""Automated Email sender.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rm3PgXcr57sF8z5wJTLaKKqm82U2a8Ag
"""

# Install required packages
!pip install pandas
!pip install pillow
!pip install fpdf  # Install the fpdf package

import smtplib
import ssl
from email.mime.text import MIMEText
from email.utils import formataddr
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from PIL import Image, ImageDraw, ImageFont
import pandas as pd
import os
from fpdf import FPDF  # Import fpdf for PDF generation

# Generate a synthetic dataset and save it as 'attendees.xlsx'
data = {
    'Email': ['alice.johnson@example.com', 'bob.smith@example.com', 'xyz@gmail.com'],
    'Name': ['Alice Johnson', 'Bob Smith', 'Mitali'],
    'EventDate': ['2024-08-15', '2024-08-16', '2024-08-17'],
    'Attachment': ['certificate1.pdf', 'certificate2.pdf', '']  # Add empty string if no attachment
}

df = pd.DataFrame(data)
df.to_excel('attendees.xlsx', index=False)

# Create a sample PDF file for attachments (you can skip this part if you already have attachment files)
def create_sample_pdf(file_name, name):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(200, 10, txt=f'Certificate of Participation for {name}', ln=True, align='C')
    pdf.output(file_name)

# Generate sample PDF files for the attachments
for email, name, attachment in zip(data['Email'], data['Name'], data['Attachment']):
    if attachment:
        create_sample_pdf(attachment, name)



# Email configuration
sender_email = "yourname@gmail.com"  # Replace with your Gmail email
sender_name = "Mitali Irpatgire"  # Replace with your name
password = "   "  # Replace with your App Password for Gmail

# Set up the SMTP server
server = smtplib.SMTP('smtp.gmail.com', 587)
context = ssl.create_default_context()
server.starttls(context=context)
server.login(sender_email, password)

# Load data from Excel
data = pd.read_excel("attendees.xlsx")

# Extract details from the file
receiver_emails = data['Email'].to_list()
receiver_names = data['Name'].to_list()
event_dates = data['EventDate'].to_list()
attachments = data['Attachment'].to_list()

# Iterate over each recipient
for receiver_email, receiver_name, event_date, attachment in zip(receiver_emails, receiver_names, event_dates, attachments):
    # Create the email
    msg = MIMEMultipart()
    msg['Subject'] = f'Event Notification for {receiver_name} - {event_date}'
    msg['From'] = formataddr((sender_name, sender_email))
    msg['To'] = formataddr((receiver_name, receiver_email))

    # Email content
    email_content = f"""
    <html>
    <body>
    <p>Dear {receiver_name},</p>
    <p>We are excited to inform you about the upcoming event on {event_date}. Please find the details below:</p>
    <ul>
        <li><b>Event Date:</b> {event_date}</li>
        <li><b>Venue:</b> Example Venue</li>
        <li><b>Time:</b> 10:00 AM - 4:00 PM</li>
    </ul>
    <p>We look forward to seeing you there!</p>
    <p>Best regards,<br>
    {sender_name}<br>
    Event Organizer</p>
    </body>
    </html>
    """
    msg.attach(MIMEText(email_content, 'html'))

    # Attach a file
    if pd.notna(attachment) and attachment:
        try:
            with open(attachment, 'rb') as file:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(file.read())
                encoders.encode_base64(part)
                part.add_header('Content-Disposition', f'attachment; filename={attachment}')
                msg.attach(part)
        except FileNotFoundError:
            print(f'Attachment {attachment} not found for {receiver_email}')

# Send the email
try:
        server.sendmail(sender_email, receiver_email, msg.as_string())
        print(f"Email sent to {receiver_email}")
except Exception as e:
        print(f'Error! Could not send email to {receiver_email}. Error: {e}')

# Quit the server
server.quit()
print('All emails have been sent successfully.')

# Cleanup the generated files
for file in os.listdir():
    if file.endswith('.pdf'):
        os.remove(file)

